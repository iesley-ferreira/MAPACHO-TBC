// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthBling {
  id            String   @id @default(uuid())
  access_token  String
  refresh_token String
  expires_in    Int
  token_type    String
  scope         String
  updated_at    DateTime @updatedAt()
  created_at    DateTime @default(now())
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String?
  img_profile String?
  google_id   String?  @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  isPending   Boolean  @default(true)

  AuthCode AuthCode[]
  Address  Address?
  orders   Order[]
}

model Address {
  id           String   @id @default(uuid())
  user_id      String   @unique
  cep          String
  address      String
  city         String
  state        String
  neighborhood String
  complement   String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt()

  USER User @relation(fields: [user_id], references: [id])
}

model Order {
  id         String            @id @default(uuid())
  user_id    String
  payment_id BigInt
  total      Float
  status     PaymentStatusEnum
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt()

  User     User      @relation(fields: [user_id], references: [id])
  products Product[]
}

model Product {
  id             String @id @default(uuid())
  order_id       String
  nome           String
  codigo         String
  preco          Float
  tipo           String
  situacao       String
  formato        String
  descricaoCurta String
  imagemURL      String
  variacao       String
  quantidade     Int

  Order Order @relation(fields: [order_id], references: [id])
}

model AuthCode {
  id         String   @id @default(cuid())
  user_id    String   @unique
  code       String   @unique
  created_at DateTime @default(now())

  USER User @relation(fields: [user_id], references: [id])
}

enum PaymentStatusEnum {
  processing
  approved
  pending
}
